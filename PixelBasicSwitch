def pixleSwitchbasic(image, net):
  origLabel = net(image).argmax(dim=1)[0].item()
  flatImageR = image[0].view(-1)
  flatImageG = image[1].view(-1)
  flatImageB = image[2].view(-1)
  #print(flatImageR.shape)
  #print(flatImage)
  indexes = []
  counter = 0
  for i in range(len(flatImageR)):
    indexes.append([flatImageR[i] + flatImageG[i] + flatImageB[i], counter])
    counter = counter + 1
  #the image is now stored in a multidimensional array where indexes[number][0] is the value of the given pixel and indexes[number][1] is the index of the pixel in the original image

  #indexes now must be sorted
  indexes = sorted(indexes)
  #print(indexes)
  attackedImageR = flatImageR
  attackedImageG = flatImageG
  attackedImageB = flatImageB
  swapMe = 0
  counterTwo = 0
  for counterTwo in range(len(indexes)/2):
    if net(torch.stack((attackedImageR.view(32,32), attackedImageG.view(32,32), attackedImageB.view(32,32)))).argmax(dim=1)[0].item()==origLabel:
      break
    #swap pixels of indexes n and length-n
    attackedImageR[indexes[counterTwo][1]] = flatImageR[indexes[1023-counterTwo][1]]
    attackedImageR[1023-counterTwo] = flatImageR[indexes[counterTwo][1]]
    attackedImageG[indexes[counterTwo][1]] = flatImageG[indexes[1023-counterTwo][1]]
    attackedImageG[1023-counterTwo] = flatImageG[indexes[counterTwo][1]]
    attackedImageB[indexes[counterTwo][1]] = flatImageB[indexes[1023-counterTwo][1]]
    attackedImageB[1023-counterTwo] = flatImageB[indexes[counterTwo][1]]
    counterTwo = counterTwo + 1

  attackedImage = torch.stack((attackedImageR.view(32,32), attackedImageG.view(32,32), attackedImageB.view(32,32)))
  print(attackedImage.size())
  attackedImage
  return attackedImage
